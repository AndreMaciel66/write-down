{"version":3,"sources":["components/ArticleEdit.js","App.js","serviceWorker.js","index.js"],"names":["exampleText","EditPanel","props","react_default","a","createElement","name","id","cols","rows","value","content","onChange","handleUpdate","DisplayPanel","dangerouslySetInnerHTML","renderResult","MarkdownPanel","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleContentUpdate","e","target","setState","state","__html","MarkdownIt","render","className","Component","App","components_ArticleEdit","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAMIA,SAAW,kLA0Df,SAASC,EAAUC,GACjB,OACEC,EAAAC,EAAAC,cAAA,YAAUC,KAAK,GAAGC,GAAG,GAAGC,KAAK,KAAKC,KAAK,KAAKC,MAAOR,EAAMS,QAASC,SAAUV,EAAMW,eAStF,SAASC,EAAaZ,GACpB,OACEC,EAAAC,EAAAC,cAAA,OAAKU,wBAAyBb,EAAMc,eAUzBC,kBAzDb,SAAAA,EAAYf,GAAO,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMnB,KAMRuB,oBAAsB,SAAAC,GACpB,IAAMhB,EAAQgB,EAAEC,OAAOjB,MACvBQ,EAAKU,SAAS,CACZjB,QAASD,KARXQ,EAAKW,MAAQ,CACXlB,QAASX,GAHMkB,wEAgBjB,IAAIF,EAAe,CACjBc,QAAQ,IAAIC,KAAaC,OAAOX,KAAKQ,MAAMlB,UAG7C,OACER,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,gBACb9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACJ,EAAD,CAAWU,QAASU,KAAKQ,MAAMlB,QAASE,aAAcQ,KAAKI,uBAE7DtB,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAACS,EAAD,CAAcE,aAAcA,aA5BVkB,aCbbC,mLATX,OACEhC,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,OACb9B,EAAAC,EAAAC,cAAA,UAAQ4B,UAAU,cAAlB,8BACA9B,EAAAC,EAAAC,cAAC+B,EAAD,cALUF,aCKEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASV,OAAO7B,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8b63085f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport MarkdownIt from \"markdown-it\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './ArticleEdit.css';\r\n\r\nlet exampleText = `# H1\r\n\r\n## H2\r\n\r\n### H3\r\n\r\n[Google](https://www.google.com)\r\n\r\n- one\r\n- two\r\n- three\r\n\r\n\r\n\\`\\`\\`javascript\r\nvar name = {}; \r\n\\`\\`\\`\r\n\r\n__markdown-it__\r\n\r\n> this is a blockquote\r\n\r\n`;\r\n\r\nclass MarkdownPanel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      content: exampleText\r\n    };\r\n  }\r\n\r\n  handleContentUpdate = e => {\r\n    const value = e.target.value;\r\n    this.setState({\r\n      content: value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    // let md = new MarkdownIt();\r\n    let renderResult = {\r\n      __html: new MarkdownIt().render(this.state.content)\r\n    };\r\n\r\n    return (\r\n      <div className=\"edit-wrapper\">\r\n        <div>\r\n          <EditPanel content={this.state.content} handleUpdate={this.handleContentUpdate}/>\r\n        </div>\r\n        <div>\r\n          {/*<div dangerouslySetInnerHTML={renderResult}/>*/}\r\n          <DisplayPanel renderResult={renderResult}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction EditPanel(props) {\r\n  return (\r\n    <textarea name=\"\" id=\"\" cols=\"80\" rows=\"30\" value={props.content} onChange={props.handleUpdate}/>\r\n  )\r\n}\r\n\r\nEditPanel.propTypes = {\r\n  content: PropTypes.string,\r\n  handleUpdate: PropTypes.func\r\n};\r\n\r\nfunction DisplayPanel(props) {\r\n  return (\r\n    <div dangerouslySetInnerHTML={props.renderResult}/>\r\n  )\r\n}\r\n\r\nDisplayPanel.propTypes = {\r\n  renderResult: PropTypes.object\r\n};\r\n\r\n\r\n\r\nexport default MarkdownPanel;\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport ArticleEdit from './components/ArticleEdit';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">Let's start to write down.</header>\n        <ArticleEdit/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}